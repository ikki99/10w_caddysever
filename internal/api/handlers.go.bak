package api

import (
	"encoding/json"
	"io"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"time"

	"caddy-manager/internal/auth"
	"caddy-manager/internal/config"
	"caddy-manager/internal/database"
	"caddy-manager/internal/models"
)

func IndexHandler(w http.ResponseWriter, r *http.Request) {
	tmpl := `<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Caddy 管理器</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Microsoft YaHei', Arial, sans-serif; background: #f5f7fa; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .header h1 { color: #2c3e50; font-size: 24px; }
        .card { background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .btn { padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; }
        .btn-primary { background: #409EFF; color: #fff; }
        .btn-primary:hover { background: #66b1ff; }
        .btn-success { background: #67C23A; color: #fff; }
        .btn-danger { background: #F56C6C; color: #fff; }
        input[type="text"], input[type="password"], select { width: 100%; padding: 10px; border: 1px solid #dcdfe6; border-radius: 4px; margin-bottom: 10px; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; color: #606266; }
        .site-list { list-style: none; }
        .site-item { padding: 15px; border-bottom: 1px solid #ebeef5; display: flex; justify-content: space-between; align-items: center; }
        .site-item:last-child { border-bottom: none; }
        #login-page, #setup-page, #dashboard { display: none; }
        .tabs { display: flex; border-bottom: 2px solid #e4e7ed; margin-bottom: 20px; }
        .tab { padding: 10px 20px; cursor: pointer; border-bottom: 2px solid transparent; margin-bottom: -2px; }
        .tab.active { color: #409EFF; border-bottom-color: #409EFF; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }
    </style>
</head>
<body>
    <div id="setup-page">
        <div class="container" style="max-width: 500px; margin-top: 100px;">
            <div class="card">
                <h2 style="text-align: center; margin-bottom: 20px;">🎉 欢迎使用 Caddy 管理器</h2>
                <p style="text-align: center; color: #909399; margin-bottom: 20px;">请创建管理员账户</p>
                <form id="setup-form">
                    <div class="form-group">
                        <label>用户名</label>
                        <input type="text" id="setup-username" required>
                    </div>
                    <div class="form-group">
                        <label>密码</label>
                        <input type="password" id="setup-password" required>
                    </div>
                    <div class="form-group">
                        <label>确认密码</label>
                        <input type="password" id="setup-password2" required>
                    </div>
                    <button type="submit" class="btn btn-primary" style="width: 100%;">完成设置</button>
                </form>
            </div>
        </div>
    </div>

    <div id="login-page">
        <div class="container" style="max-width: 400px; margin-top: 100px;">
            <div class="card">
                <h2 style="text-align: center; margin-bottom: 20px;">Caddy 管理器</h2>
                <form id="login-form">
                    <div class="form-group">
                        <label>用户名</label>
                        <input type="text" id="login-username" required>
                    </div>
                    <div class="form-group">
                        <label>密码</label>
                        <input type="password" id="login-password" required>
                    </div>
                    <button type="submit" class="btn btn-primary" style="width: 100%;">登录</button>
                </form>
            </div>
        </div>
    </div>

    <div id="dashboard">
        <div class="container">
            <div class="header">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h1>🖥️ Caddy 管理器</h1>
                    <div>
                        <span id="caddy-status">状态检查中...</span>
                        <button class="btn btn-primary" onclick="logout()">退出</button>
                    </div>
                </div>
            </div>

            <div class="tabs">
                <div class="tab active" onclick="switchTab('sites')">站点管理</div>
                <div class="tab" onclick="switchTab('files')">文件管理</div>
                <div class="tab" onclick="switchTab('env')">环境部署</div>
            </div>

            <div id="sites-tab" class="tab-content active">
                <div class="card">
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                        <h3>站点列表</h3>
                        <button class="btn btn-primary" onclick="showAddSite()">+ 添加站点</button>
                    </div>
                    <ul class="site-list" id="site-list"></ul>
                </div>
            </div>

            <div id="files-tab" class="tab-content">
                <div class="card">
                    <h3 style="margin-bottom: 20px;">文件管理器</h3>
                    <input type="file" id="file-upload" style="margin-bottom: 10px;">
                    <button class="btn btn-primary" onclick="uploadFile()">上传文件</button>
                    <div id="file-list" style="margin-top: 20px;"></div>
                </div>
            </div>

            <div id="env-tab" class="tab-content">
                <div class="card">
                    <h3 style="margin-bottom: 20px;">运行环境部署</h3>
                    <p style="color: #909399; margin-bottom: 20px;">一键安装常用开发环境</p>
                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px;">
                        <button class="btn btn-success" onclick="installEnv('python')">安装 Python</button>
                        <button class="btn btn-success" onclick="installEnv('nodejs')">安装 Node.js</button>
                        <button class="btn btn-success" onclick="installEnv('java')">安装 Java</button>
                        <button class="btn btn-success" onclick="installEnv('go')">安装 Go</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        async function checkFirstRun() {
            const res = await fetch('/api/setup');
            const data = await res.json();
            if (data.firstRun) {
                document.getElementById('setup-page').style.display = 'block';
            } else {
                document.getElementById('login-page').style.display = 'block';
            }
        }

        document.getElementById('setup-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = document.getElementById('setup-username').value;
            const password = document.getElementById('setup-password').value;
            const password2 = document.getElementById('setup-password2').value;
            
            if (password !== password2) {
                alert('两次密码不一致');
                return;
            }

            const res = await fetch('/api/setup', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });

            if (res.ok) {
                alert('设置完成，请登录');
                document.getElementById('setup-page').style.display = 'none';
                document.getElementById('login-page').style.display = 'block';
            } else {
                alert('设置失败');
            }
        });

        document.getElementById('login-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = document.getElementById('login-username').value;
            const password = document.getElementById('login-password').value;

            const res = await fetch('/api/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });

            if (res.ok) {
                document.getElementById('login-page').style.display = 'none';
                document.getElementById('dashboard').style.display = 'block';
                loadSites();
                checkCaddyStatus();
            } else {
                alert('登录失败');
            }
        });

        async function loadSites() {
            const res = await fetch('/api/sites');
            const sites = await res.json();
            const list = document.getElementById('site-list');
            list.innerHTML = sites.map(site => ` + "`" + `
                <li class="site-item">
                    <div>
                        <strong>${site.domain}</strong>
                        <span style="color: #909399; margin-left: 10px;">${site.type === 'proxy' ? '反向代理' : '静态站点'} → ${site.target}</span>
                    </div>
                    <div>
                        <button class="btn btn-danger" onclick="deleteSite(${site.id})">删除</button>
                    </div>
                </li>
            ` + "`" + `).join('');
        }

        function showAddSite() {
            const domain = prompt('请输入域名:');
            if (!domain) return;
            const type = confirm('是反向代理吗？(确定=反向代理, 取消=静态站点)') ? 'proxy' : 'static';
            const target = prompt(type === 'proxy' ? '请输入目标地址 (如: http://localhost:3000)' : '请输入静态文件路径:');
            if (!target) return;

            fetch('/api/sites/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ domain, type, target, ssl_enabled: true })
            }).then(() => loadSites());
        }

        function deleteSite(id) {
            if (!confirm('确定删除吗？')) return;
            fetch('/api/sites/delete?id=' + id, { method: 'POST' })
                .then(() => loadSites());
        }

        function switchTab(tab) {
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
            event.target.classList.add('active');
            document.getElementById(tab + '-tab').classList.add('active');
            
            if (tab === 'files') loadFiles();
        }

        async function loadFiles() {
            const res = await fetch('/api/files/list');
            const files = await res.json();
            const list = document.getElementById('file-list');
            list.innerHTML = files.map(f => ` + "`" + `
                <div style="padding: 10px; border-bottom: 1px solid #eee;">
                    ${f.name}
                    <button class="btn btn-danger" style="float: right;" onclick="deleteFile('${f.name}')">删除</button>
                    <a href="/api/files/download?name=${f.name}" class="btn btn-primary" style="float: right; margin-right: 10px;">下载</a>
                </div>
            ` + "`" + `).join('');
        }

        function uploadFile() {
            const file = document.getElementById('file-upload').files[0];
            if (!file) return;
            
            const formData = new FormData();
            formData.append('file', file);
            
            fetch('/api/files/upload', {
                method: 'POST',
                body: formData
            }).then(() => loadFiles());
        }

        function deleteFile(name) {
            fetch('/api/files/delete?name=' + name, { method: 'POST' })
                .then(() => loadFiles());
        }

        async function checkCaddyStatus() {
            const res = await fetch('/api/caddy/status');
            const data = await res.json();
            document.getElementById('caddy-status').textContent = data.running ? '✅ Caddy 运行中' : '❌ Caddy 未运行';
        }

        function installEnv(env) {
            if (!confirm('确定要安装 ' + env + ' 吗？')) return;
            fetch('/api/env/install', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ env })
            }).then(() => alert('安装命令已执行，请查看日志'));
        }

        function logout() {
            fetch('/api/logout', { method: 'POST' })
                .then(() => location.reload());
        }

        checkFirstRun();
    </script>
</body>
</html>`

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Write([]byte(tmpl))
}

func SetupHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		isFirst := database.IsFirstRun()
		json.NewEncoder(w).Encode(map[string]bool{"firstRun": isFirst})
		return
	}

	var req struct {
		Username string `json:"username"`
		Password string `json:"password"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	hash, err := auth.HashPassword(req.Password)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	db := database.GetDB()
	_, err = db.Exec("INSERT INTO users (username, password) VALUES (?, ?)", req.Username, hash)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func LoginHandler(w http.ResponseWriter, r *http.Request) {
	var req struct {
		Username string `json:"username"`
		Password string `json:"password"`
	}

	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	db := database.GetDB()
	var hash string
	err := db.QueryRow("SELECT password FROM users WHERE username = ?", req.Username).Scan(&hash)
	if err != nil || !auth.CheckPassword(req.Password, hash) {
		http.Error(w, "Invalid credentials", http.StatusUnauthorized)
		return
	}

	sessionID, err := auth.CreateSession(req.Username)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	http.SetCookie(w, &http.Cookie{
		Name:     "session_id",
		Value:    sessionID,
		Expires:  time.Now().Add(24 * time.Hour),
		HttpOnly: true,
		Path:     "/",
	})

	w.WriteHeader(http.StatusOK)
}

func LogoutHandler(w http.ResponseWriter, r *http.Request) {
	cookie, err := r.Cookie("session_id")
	if err == nil {
		auth.DeleteSession(cookie.Value)
	}

	http.SetCookie(w, &http.Cookie{
		Name:     "session_id",
		Value:    "",
		Expires:  time.Now().Add(-1 * time.Hour),
		HttpOnly: true,
		Path:     "/",
	})

	w.WriteHeader(http.StatusOK)
}

func SitesHandler(w http.ResponseWriter, r *http.Request) {
	db := database.GetDB()
	rows, err := db.Query("SELECT id, domain, type, target, ssl_enabled FROM sites ORDER BY created_at DESC")
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var sites []models.Site
	for rows.Next() {
		var site models.Site
		if err := rows.Scan(&site.ID, &site.Domain, &site.Type, &site.Target, &site.SSLEnabled); err != nil {
			continue
		}
		sites = append(sites, site)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(sites)
}

func AddSiteHandler(w http.ResponseWriter, r *http.Request) {
	var site models.Site
	if err := json.NewDecoder(r.Body).Decode(&site); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	db := database.GetDB()
	_, err := db.Exec("INSERT INTO sites (domain, type, target, ssl_enabled) VALUES (?, ?, ?, ?)",
		site.Domain, site.Type, site.Target, site.SSLEnabled)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// 重新生成 Caddyfile 并重启 Caddy
	generateCaddyfile()
	restartCaddy()

	w.WriteHeader(http.StatusOK)
}

func EditSiteHandler(w http.ResponseWriter, r *http.Request) {
	var site models.Site
	if err := json.NewDecoder(r.Body).Decode(&site); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	db := database.GetDB()
	_, err := db.Exec("UPDATE sites SET domain=?, type=?, target=?, ssl_enabled=?, updated_at=CURRENT_TIMESTAMP WHERE id=?",
		site.Domain, site.Type, site.Target, site.SSLEnabled, site.ID)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	generateCaddyfile()
	restartCaddy()

	w.WriteHeader(http.StatusOK)
}

func DeleteSiteHandler(w http.ResponseWriter, r *http.Request) {
	id := r.URL.Query().Get("id")
	db := database.GetDB()
	_, err := db.Exec("DELETE FROM sites WHERE id=?", id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	generateCaddyfile()
	restartCaddy()

	w.WriteHeader(http.StatusOK)
}

func CaddyStatusHandler(w http.ResponseWriter, r *http.Request) {
	cmd := exec.Command("tasklist", "/FI", "IMAGENAME eq caddy.exe")
	output, _ := cmd.Output()
	running := len(output) > 100

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]bool{"running": running})
}

func CaddyRestartHandler(w http.ResponseWriter, r *http.Request) {
	restartCaddy()
	w.WriteHeader(http.StatusOK)
}

func FileListHandler(w http.ResponseWriter, r *http.Request) {
	uploadDir := filepath.Join(config.DataDir, "uploads")
	os.MkdirAll(uploadDir, 0755)

	files, err := os.ReadDir(uploadDir)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	var fileList []map[string]string
	for _, file := range files {
		fileList = append(fileList, map[string]string{"name": file.Name()})
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(fileList)
}

func FileUploadHandler(w http.ResponseWriter, r *http.Request) {
	file, header, err := r.FormFile("file")
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	defer file.Close()

	uploadDir := filepath.Join(config.DataDir, "uploads")
	os.MkdirAll(uploadDir, 0755)

	dst, err := os.Create(filepath.Join(uploadDir, header.Filename))
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	defer dst.Close()

	io.Copy(dst, file)
	w.WriteHeader(http.StatusOK)
}

func FileDownloadHandler(w http.ResponseWriter, r *http.Request) {
	name := r.URL.Query().Get("name")
	filePath := filepath.Join(config.DataDir, "uploads", name)

	w.Header().Set("Content-Disposition", "attachment; filename="+name)
	http.ServeFile(w, r, filePath)
}

func FileDeleteHandler(w http.ResponseWriter, r *http.Request) {
	name := r.URL.Query().Get("name")
	filePath := filepath.Join(config.DataDir, "uploads", name)
	os.Remove(filePath)
	w.WriteHeader(http.StatusOK)
}

func EnvListHandler(w http.ResponseWriter, r *http.Request) {
	envs := []map[string]string{
		{"name": "Python", "status": "未安装"},
		{"name": "Node.js", "status": "未安装"},
		{"name": "Java", "status": "未安装"},
		{"name": "Go", "status": "未安装"},
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(envs)
}

func EnvInstallHandler(w http.ResponseWriter, r *http.Request) {
	var req struct {
		Env string `json:"env"`
	}
	json.NewDecoder(r.Body).Decode(&req)

	// 这里可以实现自动下载安装逻辑
	// 简化起见，仅返回成功

	w.WriteHeader(http.StatusOK)
}

func generateCaddyfile() error {
	db := database.GetDB()
	rows, err := db.Query("SELECT domain, type, target, ssl_enabled FROM sites")
	if err != nil {
		return err
	}
	defer rows.Close()

	var content string
	for rows.Next() {
		var domain, siteType, target string
		var sslEnabled bool
		rows.Scan(&domain, &siteType, &target, &sslEnabled)

		if siteType == "proxy" {
			content += domain + " {\n"
			content += "    reverse_proxy " + target + "\n"
			content += "}\n\n"
		} else {
			content += domain + " {\n"
			content += "    root * " + target + "\n"
			content += "    file_server\n"
			content += "}\n\n"
		}
	}

	return os.WriteFile(config.CaddyConfig, []byte(content), 0644)
}

func restartCaddy() {
	// 停止 Caddy
	exec.Command("taskkill", "/F", "/IM", "caddy.exe").Run()

	// 启动 Caddy
	if _, err := os.Stat(config.CaddyBin); err == nil {
		cmd := exec.Command(config.CaddyBin, "run", "--config", config.CaddyConfig)
		cmd.Dir = config.CaddyDir
		cmd.Start()
	}
}
